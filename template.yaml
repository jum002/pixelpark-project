AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: PixelPark API Deployment.

Globals:
  Function:
    Runtime: python3.11
    Timeout: 10
    MemorySize: 256
    Tracing: Active
    Environment:
      Variables:
        DB_NAME: !Ref DbName
        DB_USER: !Ref DbUser
        DB_HOST: !Ref DbHost
        DB_PASSWORD: !Ref DbPassword
        COGNITO_CLIENT_ID: !Ref PixelParkUserPoolClient

Parameters:
  DbName:
    Type: String
  DbUser:
    Type: String
  DbHost:
    Type: String
  DbPassword:
    Type: String

Resources:
  # ========== Cognito ==========

  PixelParkUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: PixelParkUserPool
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false

  PixelParkUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: PixelParkAppClient
      UserPoolId: !Ref PixelParkUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
        - USER_PASSWORD_AUTH

    # ========== API Gateway ==========

  PixelParkApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: PixelPark
      StageName: dev
      EndpointConfiguration: REGIONAL
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt PixelParkUserPool.Arn
      TracingEnabled: true
      # Cors:
      #   AllowMethods: "'GET,OPTIONS'"
      #   AllowOrigins: "'*'"

  # ========== Products APIs ==========

  # GET /products
  ProductsGetAllFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda_functions/products/productsGetAll/
      Handler: app.lambda_handler
      Layers:
        - arn:aws:lambda:us-west-1:809604783960:layer:PixelPark_layer:3
      Events:
        GetProducts:
          Type: Api
          Properties:
            RestApiId: !Ref PixelParkApi
            Path: /products
            Method: GET

  # GET /products/{id}
  ProductsGetByIdFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda_functions/products/productsGetById/
      Handler: app.lambda_handler
      Layers:
        - arn:aws:lambda:us-west-1:809604783960:layer:PixelPark_layer:3
      Events:
        GetProductById:
          Type: Api
          Properties:
            RestApiId: !Ref PixelParkApi
            Path: /products/{id}
            Method: GET

  # ========== Auth APIs ==========

  # POST /auth/register
  UserRegisterFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda_functions/auth/userRegister/
      Handler: app.lambda_handler
      Events:
        RegisterUser:
          Type: Api
          Properties:
            RestApiId: !Ref PixelParkApi
            Path: /auth/register
            Method: POST

  # POST /auth/confirm
  UserConfirmFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda_functions/auth/userConfirm/
      Handler: app.lambda_handler
      Events:
        ConfirmUser:
          Type: Api
          Properties:
            RestApiId: !Ref PixelParkApi
            Path: /auth/confirm
            Method: POST

  # POST /auth/login
  UserLoginFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda_functions/auth/userLogin/
      Handler: app.lambda_handler
      Events:
        LoginUser:
          Type: Api
          Properties:
            RestApiId: !Ref PixelParkApi
            Path: /auth/login
            Method: POST

  # POST /auth/logout
  UserLogoutFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda_functions/auth/userLogout/
      Handler: app.lambda_handler
      Events:
        LogoutUser:
          Type: Api
          Properties:
            RestApiId: !Ref PixelParkApi
            Path: /auth/logout
            Method: POST

  # PostConfirmation Trigger
  UserCreateFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda_functions/auth/userCreate/
      Handler: app.lambda_handler
      Layers:
        - arn:aws:lambda:us-west-1:809604783960:layer:PixelPark_layer:3
      Events:
        CognitoPostConfirmation:
          Type: Cognito
          Properties:
            UserPool: !Ref PixelParkUserPool
            Trigger: PostConfirmation

  # ========== User APIs ==========

  UserProfileFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda_functions/profile/profileGetUser
      Handler: app.lambda_handler
      Layers:
        - arn:aws:lambda:us-west-1:809604783960:layer:PixelPark_layer:3
      Events:
        GetUserProfile:
          Type: Api
          Properties:
            RestApiId: !Ref PixelParkApi
            Path: /profile
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer
